// Fun√ß√£o que simula uma opera√ß√£o ass√≠ncrona de preparo do pedido
function prepararPedido(pedido) {
  return new Promise((resolve, reject) => {
    // Simulando uma opera√ß√£o ass√≠ncrona que leva 2 segundos para ser conclu√≠da
    setTimeout(() => {
      const sucesso = Math.random() > 0.5; // Simulando sucesso ou falha de forma aleat√≥ria
      if (sucesso) {
        pedido.status = "preparando";
        resolve(
          `O pedido n¬∫${pedido.id} do ${pedido.cliente} est√° sendo preparado...`
        );
      } else {
        reject(
          `Erro ao processar o pedido n¬∫${pedido.id} do ${pedido.cliente}: Problemas na cozinha!`
        );
      }
    }, 2000);
  });
}

// Fun√ß√£o que simula uma opera√ß√£o ass√≠ncrona de finaliza√ß√£o do pedido
function finalizarPedido(pedido) {
  return new Promise(resolve => {
    // Simulando uma opera√ß√£o ass√≠ncrona que leva 3 segundos para ser conclu√≠da
    setTimeout(() => {
      pedido.status = "pronto";
      resolve(
        `O pedido n¬∫${pedido.id} do ${pedido.cliente} est√° pronto para entrega!`
      );
    }, 3000);
  });
}

// Fun√ß√£o que simula uma opera√ß√£o ass√≠ncrona de entrega do pedido
function entregarPedido(pedido) {
  return new Promise(resolve => {
    // Simulando uma opera√ß√£o ass√≠ncrona que leva 3 segundos para ser conclu√≠da
    setTimeout(() => {
      pedido.status = "entregue";
      resolve(
        `O pedido n¬∫${pedido.id} do ${pedido.cliente} foi entregue com sucesso!`
      );
    }, 1000);
  });
}

class Pedido {
  constructor(id, cliente, prato) {
    this.id = id;
    this.cliente = cliente;
    this.prato = prato;
    this.status = "pendente";
  }

  // M√©todo para descrever o pedido
  descricaoPedido() {
    let statusDescricao = "";
    switch (this.status) {
      case "pendente":
        statusDescricao = "est√° pendente.";
        break;
      case "preparando":
        statusDescricao = "est√° sendo preparado.";
        break;
      case "pronto":
        statusDescricao = "est√° pronto para entrega.";
        break;
      case "entregue":
        statusDescricao = "foi entregue.";
        break;
      default:
        statusDescricao = "est√° com status desconhecido.";
    }
    return `O ${this.cliente} pediu um ${this.prato}. N¬∫ do pedido: ${this.id}. Status: ${statusDescricao}`;
  }

  // M√©todo para verificar o status do pedido
  processarPedido() {
    console.log(
      `üîÑ Processando pedido n¬∫${this.id} do cliente ${this.cliente} ...`
    );

    prepararPedido(this)
      .then(resultado => {
        console.log(resultado);
        return finalizarPedido(this);
      })
      .then(resultadoFinalizacao => {
        console.log(resultadoFinalizacao);
        return entregarPedido(this);
      })
      .then(resultadoEntrega => {
        console.log(resultadoEntrega);
      })
      .catch(erro => {
        console.error(`${erro}`);
      });
  }
}

// Cria√ß√£o de um objeto (inst√¢ncia da classe Pedido)
const meuPedido = new Pedido(13, "Jo√£o", "X-cabelo");

// Manipula√ß√£o do objeto e exibi√ß√£o da descri√ß√£o
console.log(meuPedido.descricaoPedido());

// Verifica√ß√£o do status do pedido utilizando a promessa encadeada
meuPedido.processarPedido();
